---
version: '3.7'
services:
  ## MySQL Docker Compose Config
  MySQL-order:
    container_name: MySQL-order
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: order_service

    volumes:
      - mysql-order:/var/lib/mysql
    expose:
      - "3308"
    ports:
      - "3308:3306"
    restart: always
  MySQL-inventory:
    container_name: MySQL-inventory
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: inventory_service
    volumes:
      - mysql-inventory:/var/lib/mysql
    ports:
      - "3307:3306"
    restart: always

  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.2
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db

  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql
    volumes:
      - mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    ports:
      - "3309:3306"
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.2.5
    command: start-dev --import-realm
    environment:
      KC_DB: mysql
      KC_HOSTNAME: keycloak
      KC_HTTP_PORT: 8181
      KC_DB_URL_HOST: keycloak-mysql
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KC_DB_SCHEMA: keycloak
      KC_DB_URL_PORT: 3306
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    ports:
      - "8181:8181"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.0.1
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: rabbitmq:3.9.9-management
    container_name: broker
    ports:
      - "5672:5672"       # AMQP protocol
      - "15672:15672"     # RabbitMQ management web UI
    environment:
      RABBITMQ_DEFAULT_USER: order
      RABBITMQ_DEFAULT_PASS: 12345
    volumes:
       - ./rabbitmq_data:/var/lib/rabbitmq


    ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server
  discovery-server:
    image: discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"

    depends_on:
      - zipkin

  api-gateway:
    image: api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    expose:
      - "8181"
    environment:
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: product-service:latest
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: order-service:latest
    depends_on:
      - MySQL-order
      - broker
      - zipkin
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: inventory-service:latest
    depends_on:
      - MySQL-inventory
      - discovery-server
      - api-gateway

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: notification-service:latest

    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway

  ## Prometheus
#  prometheus:
#    image: prom/prometheus:v2.37.1
#    container_name: prometheus
#    restart: always
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    depends_on:
#      - product-service
#      - inventory-service
#      - order-service
#      - notification-service

#  grafana:
#    image: grafana/grafana-oss:8.5.2
#    container_name: grafana
#    restart: always
#    ports:
#      - "3000:3000"
#    links:
#      - prometheus:prometheus
#    volumes:
#      - ./grafana:/var/lib/grafana
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=password
volumes:
  mysql-order:
  mysql-inventory:
  mysql_keycloak_data:
